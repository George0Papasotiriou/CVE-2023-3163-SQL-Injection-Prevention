/* Run 1st */
DROP PROCEDURE FILTERKEYWORD;

/* Run 2nd */
CREATE OR REPLACE PROCEDURE filterKeyword(p_value IN VARCHAR2) AS
    v_sql_keywords VARCHAR2(500) := 'and|extractvalue|updatexml|exec|insert|select|delete|update|drop|count|chr|mid|master|truncate|char|declare|or|+|(|)';
    v_found_keyword BOOLEAN := FALSE;
BEGIN
    IF p_value IS NULL OR LENGTH(p_value) = 0 THEN
        RETURN;
    END IF;

    -- Check for SQL injection keywords
    FOR k IN (SELECT v_sql_keywords AS sql_keyword FROM DUAL) LOOP
        IF REGEXP_LIKE(p_value, '\b' || k.sql_keyword || '\b', 'i') THEN
            v_found_keyword := TRUE;
            EXIT;
        END IF;
    END LOOP;

    -- Execute a safe SQL statement using bind variables
    IF v_found_keyword THEN
        -- Display the SQL injection threat information
        DBMS_OUTPUT.PUT_LINE('An SQL injection risk is detected: Parameter Value = ' || p_value);
    ELSE
        -- Safe SQL statement using bind variables
        EXECUTE IMMEDIATE 'SELECT * FROM users WHERE username = :input' USING p_value;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        -- Display the error message
        DBMS_OUTPUT.PUT_LINE('An error occurred during SQL keyword filtering: ' || SQLERRM);
END;
/

/* Run 3rd */
DECLARE
    v_order_by_clause VARCHAR2(100) := 'name ASC, age DESC';
    v_user_input VARCHAR2(100) := 'admin'' OR 1=1 --';
    v_current_schema VARCHAR2(30);
BEGIN
    SELECT SYS_CONTEXT('USERENV', 'CURRENT_SCHEMA') INTO v_current_schema FROM DUAL;

    IF isValidOrderBySql(v_order_by_clause) THEN
        -- Proceed with using the order by clause in your SQL query
        DBMS_OUTPUT.PUT_LINE('Valid order by clause: ' || v_order_by_clause);
    ELSE
        -- Handle the case where the order by clause is not valid
        DBMS_OUTPUT.PUT_LINE('The order by clause is not valid');
    END IF;

    BEGIN
        filterKeyword(v_user_input);
        -- Proceed with using the user input in your SQL query
        DBMS_OUTPUT.PUT_LINE('User input: ' || v_user_input);
    EXCEPTION
        WHEN OTHERS THEN
            -- Handle the case where a SQL injection risk is detected
            DBMS_OUTPUT.PUT_LINE('An SQL injection risk is detected: ' || SQLERRM);
    END;
EXCEPTION
    WHEN OTHERS THEN
        -- Handle other exceptions
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/
